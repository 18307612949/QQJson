!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AR	Makefile	/^AR            = ar cqs$/;"	m
AbstractContext	AbstractContext.h	/^class AbstractContext{$/;"	c
AbstractContext::_stack	AbstractContext.h	/^    std::stack<QQJson::jsonPtr> _stack;$/;"	m	class:AbstractContext	access:private
AbstractContext::getStack	AbstractContext.h	/^    std::stack<QQJson::jsonPtr> &getStack(void){$/;"	f	class:AbstractContext	access:public	signature:(void)
AbstractContext::request	AbstractContext.h	/^    virtual QQJson::StateCode_Type request(QQJsonDocument *doc) = 0; $/;"	p	class:AbstractContext	access:public	signature:(QQJsonDocument *doc)
AbstractContext::setCurState	AbstractContext.h	/^    virtual void setCurState(QQJson::State_Type state) = 0;$/;"	p	class:AbstractContext	access:public	signature:(QQJson::State_Type state)
AbstractState	AbstractState.h	/^class AbstractState{$/;"	c
AbstractState::doExpectArrayValue	AbstractState.cpp	/^         AbstractState::doExpectArrayValue(AbstractContext *context, $/;"	f	class:AbstractState	signature:(AbstractContext *context, QQJson::jsonPtr json)
AbstractState::doExpectArrayValue	AbstractState.h	/^    static QQJson::StateCode_Type doExpectArrayValue(AbstractContext*, QQJson::jsonPtr);$/;"	p	class:AbstractState	access:public	signature:(AbstractContext*, QQJson::jsonPtr)
AbstractState::doExpectValue	AbstractState.cpp	/^  AbstractState::doExpectValue(AbstractContext*context, QQJson::jsonPtr ptr)$/;"	f	class:AbstractState	signature:(AbstractContext*context, QQJson::jsonPtr ptr)
AbstractState::doExpectValue	AbstractState.h	/^    static QQJson::StateCode_Type doExpectValue(AbstractContext* context, QQJson::jsonPtr ptr);$/;"	p	class:AbstractState	access:public	signature:(AbstractContext* context, QQJson::jsonPtr ptr)
AbstractState::handle	AbstractState.h	/^			handle(AbstractContext* context ,QQJsonDocument *doc) = 0;$/;"	p	class:AbstractState	access:public	signature:(AbstractContext* context ,QQJsonDocument *doc)
Array	qqjson.h	/^    typedef  std::vector<std::string> Array;$/;"	t	class:QQJson	access:public
CC	Makefile	/^CC            = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS        = -pipe -O2 -Wall -W -D_REENTRANT -fPIC $(DEFINES)$/;"	m
CHK_DIR_EXISTS	Makefile	/^CHK_DIR_EXISTS= test -d$/;"	m
COMPRESS	Makefile	/^COMPRESS      = gzip -9f$/;"	m
COPY	Makefile	/^COPY          = cp -f$/;"	m
COPY_DIR	Makefile	/^COPY_DIR      = cp -f -R$/;"	m
COPY_FILE	Makefile	/^COPY_FILE     = cp -f$/;"	m
CXX	Makefile	/^CXX           = g++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS      = -pipe -O2 -std=gnu++11 -Wall -W -D_REENTRANT -fPIC $(DEFINES)$/;"	m
DEFINES	Makefile	/^DEFINES       = -DQT_NO_DEBUG -DQT_GUI_LIB -DQT_CORE_LIB$/;"	m
DEL_DIR	Makefile	/^DEL_DIR       = rmdir$/;"	m
DEL_FILE	Makefile	/^DEL_FILE      = rm -f$/;"	m
DESTDIR	Makefile	/^DESTDIR       = $/;"	m
DIST	Makefile	/^DIST          = ..\/Qt5.7.0\/5.7\/gcc_64\/mkspecs\/features\/spec_pre.prf \\$/;"	m
DISTDIR	Makefile	/^DISTDIR = \/home\/lee\/QQJson\/.tmp\/QQJson1.0.0$/;"	m
DISTNAME	Makefile	/^DISTNAME      = QQJson1.0.0$/;"	m
DirectoryOfThisScript	.ycm_extra_conf.py	/^def DirectoryOfThisScript():$/;"	f	access:public
ExpectArrayValueState	ExpectArrayValue.h	/^class ExpectArrayValueState : public AbstractState{$/;"	c	inherits:AbstractState
ExpectArrayValueState::handle	ExpectArrayValue.cpp	/^    ExpectArrayValueState::handle(AbstractContext* context, QQJsonDocument *doc)$/;"	f	class:ExpectArrayValueState	signature:(AbstractContext* context, QQJsonDocument *doc)
ExpectArrayValueState::override	ExpectArrayValue.h	/^    virtual QQJson::StateCode_Type handle(AbstractContext*, QQJsonDocument *) override;$/;"	m	class:ExpectArrayValueState	access:public
ExpectColonState	ExpectColonState.h	/^class ExpectColonState : public AbstractState{$/;"	c	inherits:AbstractState
ExpectColonState::handle	ExpectColonState.cpp	/^    ExpectColonState::handle(AbstractContext* context, QQJsonDocument *doc)$/;"	f	class:ExpectColonState	signature:(AbstractContext* context, QQJsonDocument *doc)
ExpectColonState::override	ExpectColonState.h	/^    QQJson::StateCode_Type handle(AbstractContext*, QQJsonDocument *) override;$/;"	m	class:ExpectColonState	access:public
ExpectCommaOrEndState	ExpectCommaOrEndState.h	/^class ExpectCommaOrEndState : public AbstractState{$/;"	c	inherits:AbstractState
ExpectCommaOrEndState::handle	ExpectCommaOrEndState.cpp	/^    ExpectCommaOrEndState::handle(AbstractContext *context, QQJsonDocument *doc)$/;"	f	class:ExpectCommaOrEndState	signature:(AbstractContext *context, QQJsonDocument *doc)
ExpectCommaOrEndState::override	ExpectCommaOrEndState.h	/^    virtual QQJson::StateCode_Type handle(AbstractContext *, QQJsonDocument *) override;$/;"	m	class:ExpectCommaOrEndState	access:public
ExpectKeyState	ExpectKeyState.h	/^class ExpectKeyState: public AbstractState{$/;"	c	inherits:AbstractState
ExpectKeyState::handle	ExpectKeyState.cpp	/^    ExpectKeyState::handle(AbstractContext *context, QQJsonDocument *doc)$/;"	f	class:ExpectKeyState	signature:(AbstractContext *context, QQJsonDocument *doc)
ExpectKeyState::override	ExpectKeyState.h	/^                                QQJsonDocument *) override;$/;"	m	class:ExpectKeyState	access:public
ExpectValueState	ExpectValueState.h	/^class ExpectValueState : public AbstractState{$/;"	c	inherits:AbstractState
ExpectValueState::handle	ExpectValueState.cpp	/^    ExpectValueState::handle(AbstractContext *context, QQJsonDocument *doc)$/;"	f	class:ExpectValueState	signature:(AbstractContext *context, QQJsonDocument *doc)
ExpectValueState::override	ExpectValueState.h	/^    QQJson::StateCode_Type handle(AbstractContext*, QQJsonDocument *) override;$/;"	m	class:ExpectValueState	access:public
Expect_ArrayValue	QQJsonCommon.h	/^                    Expect_Colon, Expect_ArrayValue,$/;"	e	enum:QQJson::__anon3
Expect_ArrayValueState	QQJsonCommon.h	/^                  Expect_ArrayValueState,Expect_CommaOrEndState, $/;"	e	enum:QQJson::__anon2
Expect_Colon	QQJsonCommon.h	/^                    Expect_Colon, Expect_ArrayValue,$/;"	e	enum:QQJson::__anon3
Expect_ColonState	QQJsonCommon.h	/^                  Expect_ColonState, Start_State,$/;"	e	enum:QQJson::__anon2
Expect_CommaOrEnd	QQJsonCommon.h	/^                   Expect_CommaOrEnd, Stack_Top_Check}STATE;$/;"	e	enum:QQJson::__anon3
Expect_CommaOrEndState	QQJsonCommon.h	/^                  Expect_ArrayValueState,Expect_CommaOrEndState, $/;"	e	enum:QQJson::__anon2
Expect_Key	QQJsonCommon.h	/^    typedef enum{Start, Expect_Key, Expect_Value,$/;"	e	enum:QQJson::__anon3
Expect_KeyState	QQJsonCommon.h	/^    typedef enum{ Expect_KeyState, Expect_ValueState, $/;"	e	enum:QQJson::__anon2
Expect_Value	QQJsonCommon.h	/^    typedef enum{Start, Expect_Key, Expect_Value,$/;"	e	enum:QQJson::__anon3
Expect_ValueState	QQJsonCommon.h	/^    typedef enum{ Expect_KeyState, Expect_ValueState, $/;"	e	enum:QQJson::__anon2
FINISHED	QQJsonCommon.h	/^    typedef enum{FORMAT_ERROR, FINISHED, $/;"	e	enum:QQJson::__anon1
FORMAT_ERROR	QQJsonCommon.h	/^    typedef enum{FORMAT_ERROR, FINISHED, $/;"	e	enum:QQJson::__anon1
FlagsForFile	.ycm_extra_conf.py	/^def FlagsForFile( filename, **kwargs ):$/;"	f	access:public
GetCompilationInfoForFile	.ycm_extra_conf.py	/^def GetCompilationInfoForFile( filename ):$/;"	f	access:public
INCPATH	Makefile	/^INCPATH       = -I. -I. -I..\/Qt5.7.0\/5.7\/gcc_64\/include -I..\/Qt5.7.0\/5.7\/gcc_64\/include\/QtGui -I..\/Qt5.7.0\/5.7\/gcc_64\/include\/QtCore -I. -I..\/Qt5.7.0\/5.7\/gcc_64\/mkspecs\/linux-g++$/;"	m
INSTALL_DIR	Makefile	/^INSTALL_DIR   = cp -f -R$/;"	m
INSTALL_FILE	Makefile	/^INSTALL_FILE  = install -m 644 -p$/;"	m
INSTALL_PROGRAM	Makefile	/^INSTALL_PROGRAM = install -m 755 -p$/;"	m
IsHeaderFile	.ycm_extra_conf.py	/^def IsHeaderFile( filename ):$/;"	f	access:public
LFLAGS	Makefile	/^LFLAGS        = -Wl,-O1 -Wl,-rpath,\/home\/lee\/Qt5.7.0\/5.7\/gcc_64\/lib$/;"	m
LIBS	Makefile	/^LIBS          = $(SUBLIBS) -L\/home\/lee\/Qt5.7.0\/5.7\/gcc_64\/lib -lQt5Gui -L\/usr\/lib64 -lQt5Core -lGL -lpthread $/;"	m
LINK	Makefile	/^LINK          = g++$/;"	m
MAKEFILE	Makefile	/^MAKEFILE      = Makefile$/;"	m
MKDIR	Makefile	/^MKDIR         = mkdir -p$/;"	m
MOVE	Makefile	/^MOVE          = mv -f$/;"	m
MakeRelativePathsInFlagsAbsolute	.ycm_extra_conf.py	/^def MakeRelativePathsInFlagsAbsolute( flags, working_directory ):$/;"	f	access:public
OBJECTS	Makefile	/^OBJECTS       = AbstractState.o \\$/;"	m
OBJECTS_DIR	Makefile	/^OBJECTS_DIR   = .\/$/;"	m
Object	qqjson.h	/^    typedef  std::map<std::string ,std::string> Object;$/;"	t	class:QQJson	access:public
Parse	qqjson.cpp	/^void QQJson::Parse()$/;"	f	class:QQJson	signature:()
Parse	qqjson.h	/^    void Parse();$/;"	p	class:QQJson	access:public	signature:()
QMAKE	Makefile	/^QMAKE         = \/usr\/bin\/qmake$/;"	m
QMAKE_TARGET	Makefile	/^QMAKE_TARGET  = QQJson$/;"	m
QQJSONBOOLEN_H	qqjson_boolen.h	2;"	d
QQJSONDOCUMENT_H	qqjsondocument.h	2;"	d
QQJSONKEY_H	qqjsonkey.h	2;"	d
QQJSONNULL_H	qqjson_null.h	2;"	d
QQJSONNUMBER_H	qqjson_number.h	2;"	d
QQJSONSTRING_H	qqjsonstring.h	2;"	d
QQJSONX_H	qqjsonx.h	2;"	d
QQJSON_ARRAY	qqjsonx.h	/^        QQJSON_ARRAY, QQJSON_OBJECT, QQJSON_VALUE,$/;"	e	enum:QQJsonX::__anon5
QQJSON_ARRAY_H	qqjson_array.h	2;"	d
QQJSON_BOOLEN	qqjsonx.h	/^        QQJSON_KEY,QQJSON_STRING, QQJSON_BOOLEN,$/;"	e	enum:QQJsonX::__anon5
QQJSON_H	qqjson.h	2;"	d
QQJSON_KEY	qqjsonx.h	/^        QQJSON_KEY,QQJSON_STRING, QQJSON_BOOLEN,$/;"	e	enum:QQJsonX::__anon5
QQJSON_NULL	qqjsonx.h	/^        QQJSON_NULL,QQJSON_NUMBER$/;"	e	enum:QQJsonX::__anon5
QQJSON_NUMBER	qqjsonx.h	/^        QQJSON_NULL,QQJSON_NUMBER$/;"	e	enum:QQJsonX::__anon5
QQJSON_OBJECT	qqjsonx.h	/^        QQJSON_ARRAY, QQJSON_OBJECT, QQJSON_VALUE,$/;"	e	enum:QQJsonX::__anon5
QQJSON_OBJECT_H	qqjson_object.h	2;"	d
QQJSON_STRING	qqjsonx.h	/^        QQJSON_KEY,QQJSON_STRING, QQJSON_BOOLEN,$/;"	e	enum:QQJsonX::__anon5
QQJSON_VALUE	qqjsonx.h	/^        QQJSON_ARRAY, QQJSON_OBJECT, QQJSON_VALUE,$/;"	e	enum:QQJsonX::__anon5
QQJson	QQJsonCommon.h	/^namespace QQJson{$/;"	n
QQJson	qqjson.cpp	/^QQJson::QQJson(const std::string &str):$/;"	f	class:QQJson	signature:(const std::string &str)
QQJson	qqjson.h	/^    QQJson(const QQJson &) = delete;$/;"	p	class:QQJson	access:public	signature:(const QQJson &)
QQJson	qqjson.h	/^    QQJson(const std::string &str);$/;"	p	class:QQJson	access:public	signature:(const std::string &str)
QQJson	qqjson.h	/^class QQJson$/;"	c
QQJson::Array	qqjson.h	/^    typedef  std::vector<std::string> Array;$/;"	t	class:QQJson	access:public
QQJson::Expect_ArrayValue	QQJsonCommon.h	/^                    Expect_Colon, Expect_ArrayValue,$/;"	e	enum:QQJson::__anon3
QQJson::Expect_ArrayValueState	QQJsonCommon.h	/^                  Expect_ArrayValueState,Expect_CommaOrEndState, $/;"	e	enum:QQJson::__anon2
QQJson::Expect_Colon	QQJsonCommon.h	/^                    Expect_Colon, Expect_ArrayValue,$/;"	e	enum:QQJson::__anon3
QQJson::Expect_ColonState	QQJsonCommon.h	/^                  Expect_ColonState, Start_State,$/;"	e	enum:QQJson::__anon2
QQJson::Expect_CommaOrEnd	QQJsonCommon.h	/^                   Expect_CommaOrEnd, Stack_Top_Check}STATE;$/;"	e	enum:QQJson::__anon3
QQJson::Expect_CommaOrEndState	QQJsonCommon.h	/^                  Expect_ArrayValueState,Expect_CommaOrEndState, $/;"	e	enum:QQJson::__anon2
QQJson::Expect_Key	QQJsonCommon.h	/^    typedef enum{Start, Expect_Key, Expect_Value,$/;"	e	enum:QQJson::__anon3
QQJson::Expect_KeyState	QQJsonCommon.h	/^    typedef enum{ Expect_KeyState, Expect_ValueState, $/;"	e	enum:QQJson::__anon2
QQJson::Expect_Value	QQJsonCommon.h	/^    typedef enum{Start, Expect_Key, Expect_Value,$/;"	e	enum:QQJson::__anon3
QQJson::Expect_ValueState	QQJsonCommon.h	/^    typedef enum{ Expect_KeyState, Expect_ValueState, $/;"	e	enum:QQJson::__anon2
QQJson::FINISHED	QQJsonCommon.h	/^    typedef enum{FORMAT_ERROR, FINISHED, $/;"	e	enum:QQJson::__anon1
QQJson::FORMAT_ERROR	QQJsonCommon.h	/^    typedef enum{FORMAT_ERROR, FINISHED, $/;"	e	enum:QQJson::__anon1
QQJson::Object	qqjson.h	/^    typedef  std::map<std::string ,std::string> Object;$/;"	t	class:QQJson	access:public
QQJson::Parse	qqjson.cpp	/^void QQJson::Parse()$/;"	f	class:QQJson	signature:()
QQJson::Parse	qqjson.h	/^    void Parse();$/;"	p	class:QQJson	access:public	signature:()
QQJson::QQJson	qqjson.cpp	/^QQJson::QQJson(const std::string &str):$/;"	f	class:QQJson	signature:(const std::string &str)
QQJson::QQJson	qqjson.h	/^    QQJson(const QQJson &) = delete;$/;"	p	class:QQJson	access:public	signature:(const QQJson &)
QQJson::QQJson	qqjson.h	/^    QQJson(const std::string &str);$/;"	p	class:QQJson	access:public	signature:(const std::string &str)
QQJson::STATE	QQJsonCommon.h	/^                   Expect_CommaOrEnd, Stack_Top_Check}STATE;$/;"	t	namespace:QQJson	typeref:enum:QQJson::__anon3
QQJson::SUCCESS	QQJsonCommon.h	/^                    UNKONE_ERROR, SUCCESS} StateCode_Type;$/;"	e	enum:QQJson::__anon1
QQJson::Stack_Top_Check	QQJsonCommon.h	/^                   Expect_CommaOrEnd, Stack_Top_Check}STATE;$/;"	e	enum:QQJson::__anon3
QQJson::Start	QQJsonCommon.h	/^    typedef enum{Start, Expect_Key, Expect_Value,$/;"	e	enum:QQJson::__anon3
QQJson::Start_State	QQJsonCommon.h	/^                  Expect_ColonState, Start_State,$/;"	e	enum:QQJson::__anon2
QQJson::StateCode_Type	QQJsonCommon.h	/^                    UNKONE_ERROR, SUCCESS} StateCode_Type;$/;"	t	namespace:QQJson	typeref:enum:QQJson::__anon1
QQJson::State_Type	QQJsonCommon.h	/^                 }State_Type;    $/;"	t	namespace:QQJson	typeref:enum:QQJson::__anon2
QQJson::UNKONE_ERROR	QQJsonCommon.h	/^                    UNKONE_ERROR, SUCCESS} StateCode_Type;$/;"	e	enum:QQJson::__anon1
QQJson::_Document	qqjson.h	/^    QQJsonDocument _Document;$/;"	m	class:QQJson	access:private
QQJson::_ParseStack	qqjson.h	/^    std::stack<std::shared_ptr<QQJsonX> > _ParseStack;$/;"	m	class:QQJson	access:private
QQJsonArray	qqjson_array.cpp	/^QQJsonArray::QQJsonArray()$/;"	f	class:QQJsonArray	signature:()
QQJsonArray	qqjson_array.h	/^    QQJsonArray();$/;"	p	class:QQJsonArray	access:public	signature:()
QQJsonArray	qqjson_array.h	/^class QQJsonArray : public QQJsonX$/;"	c	inherits:QQJsonX
QQJsonArray::QQJsonArray	qqjson_array.cpp	/^QQJsonArray::QQJsonArray()$/;"	f	class:QQJsonArray	signature:()
QQJsonArray::QQJsonArray	qqjson_array.h	/^    QQJsonArray();$/;"	p	class:QQJsonArray	access:public	signature:()
QQJsonArray::_ArrayName	qqjson_array.h	/^    std::string _ArrayName;$/;"	m	class:QQJsonArray	access:private
QQJsonArray::_ArrayVector	qqjson_array.h	/^    std::vector<std::shared_ptr<QQJsonX> >  _ArrayVector;$/;"	m	class:QQJsonArray	access:private
QQJsonArray::addValue	qqjson_array.cpp	/^void QQJsonArray::addValue(std::shared_ptr<QQJsonX> ptr)$/;"	f	class:QQJsonArray	signature:(std::shared_ptr<QQJsonX> ptr)
QQJsonArray::addValue	qqjson_array.h	/^    virtual void addValue(std::shared_ptr<QQJsonX> ptr);$/;"	p	class:QQJsonArray	access:public	signature:(std::shared_ptr<QQJsonX> ptr)
QQJsonArray::operator []	qqjson_array.h	/^    std::shared_ptr<QQJsonX> operator[](const uint32_t index)$/;"	f	class:QQJsonArray	access:public	signature:(const uint32_t index)
QQJsonArray::override	qqjson_array.h	/^    virtual QQJsonX::QQJsonXType whichType() override;$/;"	m	class:QQJsonArray	access:public
QQJsonArray::override	qqjson_array.h	/^    virtual const std::string  toString() override;$/;"	m	class:QQJsonArray	access:public
QQJsonArray::toString	qqjson_array.cpp	/^const std::string QQJsonArray::toString()$/;"	f	class:QQJsonArray	signature:()
QQJsonArray::whichType	qqjson_array.cpp	/^QQJsonX::QQJsonXType QQJsonArray::whichType()$/;"	f	class:QQJsonArray	signature:()
QQJsonBoolen	qqjson_boolen.h	/^    QQJsonBoolen(std::string const &Boolen) : _Boolen(Boolen){  }$/;"	f	class:QQJsonBoolen	access:public	signature:(std::string const &Boolen)
QQJsonBoolen	qqjson_boolen.h	/^class QQJsonBoolen : public QQJsonX$/;"	c	inherits:QQJsonX
QQJsonBoolen::QQJsonBoolen	qqjson_boolen.h	/^    QQJsonBoolen(std::string const &Boolen) : _Boolen(Boolen){  }$/;"	f	class:QQJsonBoolen	access:public	signature:(std::string const &Boolen)
QQJsonBoolen::_Boolen	qqjson_boolen.h	/^    std::string _Boolen;$/;"	m	class:QQJsonBoolen	access:private
QQJsonBoolen::override	qqjson_boolen.h	/^    virtual QQJsonX::QQJsonXType whichType() override;$/;"	m	class:QQJsonBoolen	access:public
QQJsonBoolen::override	qqjson_boolen.h	/^    virtual const std::string  toString() override;$/;"	m	class:QQJsonBoolen	access:public
QQJsonBoolen::toString	qqjson_boolen.cpp	/^const std::string QQJsonBoolen::toString()$/;"	f	class:QQJsonBoolen	signature:()
QQJsonBoolen::whichType	qqjson_boolen.cpp	/^QQJsonX::QQJsonXType QQJsonBoolen::whichType()$/;"	f	class:QQJsonBoolen	signature:()
QQJsonContext	QQJsonContext.h	/^class QQJsonContext: public AbstractContext{$/;"	c	inherits:AbstractContext
QQJsonContext::_curState	QQJsonContext.h	/^    std::shared_ptr<AbstractState> _curState;$/;"	m	class:QQJsonContext	access:private
QQJsonContext::getCurState	QQJsonContext.h	/^    std::shared_ptr<AbstractState> getCurState(void)$/;"	f	class:QQJsonContext	access:public	signature:(void)
QQJsonContext::override	QQJsonContext.h	/^    QQJson::StateCode_Type request(QQJsonDocument *doc) override;$/;"	m	class:QQJsonContext	access:public
QQJsonContext::override	QQJsonContext.h	/^    void setCurState(QQJson::State_Type state) override;$/;"	m	class:QQJsonContext	access:public
QQJsonContext::request	QQJsonContext.cpp	/^   QQJsonContext::request(QQJsonDocument *doc)$/;"	f	class:QQJsonContext	signature:(QQJsonDocument *doc)
QQJsonContext::setCurState	QQJsonContext.cpp	/^void QQJsonContext::setCurState(QQJson::State_Type state)$/;"	f	class:QQJsonContext	signature:(QQJson::State_Type state)
QQJsonDocument	qqjsondocument.cpp	/^QQJsonDocument::QQJsonDocument(const std::string &str):$/;"	f	class:QQJsonDocument	signature:(const std::string &str)
QQJsonDocument	qqjsondocument.cpp	/^QQJsonDocument::QQJsonDocument(std::string &&str):$/;"	f	class:QQJsonDocument	signature:(std::string &&str)
QQJsonDocument	qqjsondocument.h	/^    QQJsonDocument(const std::string &);$/;"	p	class:QQJsonDocument	access:public	signature:(const std::string &)
QQJsonDocument	qqjsondocument.h	/^    QQJsonDocument(std::string &&);$/;"	p	class:QQJsonDocument	access:public	signature:(std::string &&)
QQJsonDocument	qqjsondocument.h	/^class QQJsonDocument$/;"	c
QQJsonDocument::QQJsonDocument	qqjsondocument.cpp	/^QQJsonDocument::QQJsonDocument(const std::string &str):$/;"	f	class:QQJsonDocument	signature:(const std::string &str)
QQJsonDocument::QQJsonDocument	qqjsondocument.cpp	/^QQJsonDocument::QQJsonDocument(std::string &&str):$/;"	f	class:QQJsonDocument	signature:(std::string &&str)
QQJsonDocument::QQJsonDocument	qqjsondocument.h	/^    QQJsonDocument(const std::string &);$/;"	p	class:QQJsonDocument	access:public	signature:(const std::string &)
QQJsonDocument::QQJsonDocument	qqjsondocument.h	/^    QQJsonDocument(std::string &&);$/;"	p	class:QQJsonDocument	access:public	signature:(std::string &&)
QQJsonDocument::TOKEN_BEGIN_ARRAY	qqjsondocument.h	/^        TOKEN_END_OBJECT, TOKEN_BEGIN_ARRAY,$/;"	e	enum:QQJsonDocument::__anon4
QQJsonDocument::TOKEN_BEGIN_OBECT	qqjsondocument.h	/^        \/*TOKEN_DOC_END, *\/TOKEN_BEGIN_OBECT,$/;"	e	enum:QQJsonDocument::__anon4
QQJsonDocument::TOKEN_BOOLEN	qqjsondocument.h	/^        TOKEN_STRING, TOKEN_BOOLEN, TOKEN_NUMER,$/;"	e	enum:QQJsonDocument::__anon4
QQJsonDocument::TOKEN_COLON	qqjsondocument.h	/^        TOKEN_END_ARRAY, TOKEN_COLON, TOKEN_COMMA,$/;"	e	enum:QQJsonDocument::__anon4
QQJsonDocument::TOKEN_COMMA	qqjsondocument.h	/^        TOKEN_END_ARRAY, TOKEN_COLON, TOKEN_COMMA,$/;"	e	enum:QQJsonDocument::__anon4
QQJsonDocument::TOKEN_END_ARRAY	qqjsondocument.h	/^        TOKEN_END_ARRAY, TOKEN_COLON, TOKEN_COMMA,$/;"	e	enum:QQJsonDocument::__anon4
QQJsonDocument::TOKEN_END_OBJECT	qqjsondocument.h	/^        TOKEN_END_OBJECT, TOKEN_BEGIN_ARRAY,$/;"	e	enum:QQJsonDocument::__anon4
QQJsonDocument::TOKEN_ERROR	qqjsondocument.h	/^        TOKEN_NULL, TOKEN_ERROR,$/;"	e	enum:QQJsonDocument::__anon4
QQJsonDocument::TOKEN_NULL	qqjsondocument.h	/^        TOKEN_NULL, TOKEN_ERROR,$/;"	e	enum:QQJsonDocument::__anon4
QQJsonDocument::TOKEN_NUMER	qqjsondocument.h	/^        TOKEN_STRING, TOKEN_BOOLEN, TOKEN_NUMER,$/;"	e	enum:QQJsonDocument::__anon4
QQJsonDocument::TOKEN_STRING	qqjsondocument.h	/^        TOKEN_STRING, TOKEN_BOOLEN, TOKEN_NUMER,$/;"	e	enum:QQJsonDocument::__anon4
QQJsonDocument::Token	qqjsondocument.h	/^    }Token;$/;"	t	class:QQJsonDocument	typeref:enum:QQJsonDocument::__anon4	access:public
QQJsonDocument::_BeginDocumentIter	qqjsondocument.h	/^   std::string::iterator _BeginDocumentIter;$/;"	m	class:QQJsonDocument	access:private
QQJsonDocument::_Document	qqjsondocument.h	/^   std::string _Document;$/;"	m	class:QQJsonDocument	access:private
QQJsonDocument::_EndDocumentIter	qqjsondocument.h	/^   std::string::iterator _EndDocumentIter;$/;"	m	class:QQJsonDocument	access:private
QQJsonDocument::_WorkerIter	qqjsondocument.h	/^   std::string::iterator _WorkerIter;$/;"	m	class:QQJsonDocument	access:private
QQJsonDocument::peekNextToken	qqjsondocument.cpp	/^QQJsonDocument::Token QQJsonDocument::peekNextToken()$/;"	f	class:QQJsonDocument	signature:()
QQJsonDocument::peekNextToken	qqjsondocument.h	/^    Token peekNextToken();$/;"	p	class:QQJsonDocument	access:public	signature:()
QQJsonDocument::popToken	qqjsondocument.h	/^    void popToken();$/;"	p	class:QQJsonDocument	access:public	signature:()
QQJsonDocument::readAToken	qqjsondocument.cpp	/^std::string QQJsonDocument::readAToken()$/;"	f	class:QQJsonDocument	signature:()
QQJsonDocument::readAToken	qqjsondocument.h	/^   std::string readAToken();$/;"	p	class:QQJsonDocument	access:public	signature:()
QQJsonDocument::readBoolen	qqjsondocument.cpp	/^std::string QQJsonDocument::readBoolen()$/;"	f	class:QQJsonDocument	signature:()
QQJsonDocument::readBoolen	qqjsondocument.h	/^    std::string readBoolen();$/;"	p	class:QQJsonDocument	access:public	signature:()
QQJsonDocument::readColon	qqjsondocument.cpp	/^std::string QQJsonDocument::readColon()$/;"	f	class:QQJsonDocument	signature:()
QQJsonDocument::readColon	qqjsondocument.h	/^    std::string readColon();$/;"	p	class:QQJsonDocument	access:public	signature:()
QQJsonDocument::readComma	qqjsondocument.cpp	/^std::string QQJsonDocument::readComma()$/;"	f	class:QQJsonDocument	signature:()
QQJsonDocument::readComma	qqjsondocument.h	/^    std::string readComma();$/;"	p	class:QQJsonDocument	access:public	signature:()
QQJsonDocument::readNull	qqjsondocument.cpp	/^std::string QQJsonDocument::readNull()$/;"	f	class:QQJsonDocument	signature:()
QQJsonDocument::readNull	qqjsondocument.h	/^    std::string readNull();$/;"	p	class:QQJsonDocument	access:public	signature:()
QQJsonDocument::readNumber	qqjsondocument.cpp	/^std::string QQJsonDocument::readNumber()$/;"	f	class:QQJsonDocument	signature:()
QQJsonDocument::readNumber	qqjsondocument.h	/^    std::string readNumber();$/;"	p	class:QQJsonDocument	access:public	signature:()
QQJsonDocument::readString	qqjsondocument.cpp	/^std::string QQJsonDocument::readString()$/;"	f	class:QQJsonDocument	signature:()
QQJsonDocument::readString	qqjsondocument.h	/^    std::string readString();$/;"	p	class:QQJsonDocument	access:public	signature:()
QQJsonKey	qqjsonkey.cpp	/^QQJsonKey::QQJsonKey(const std::string key):$/;"	f	class:QQJsonKey	signature:(const std::string key)
QQJsonKey	qqjsonkey.h	/^    QQJsonKey(const std::string key);$/;"	p	class:QQJsonKey	access:public	signature:(const std::string key)
QQJsonKey	qqjsonkey.h	/^class QQJsonKey : public QQJsonX$/;"	c	inherits:QQJsonX
QQJsonKey::QQJsonKey	qqjsonkey.cpp	/^QQJsonKey::QQJsonKey(const std::string key):$/;"	f	class:QQJsonKey	signature:(const std::string key)
QQJsonKey::QQJsonKey	qqjsonkey.h	/^    QQJsonKey(const std::string key);$/;"	p	class:QQJsonKey	access:public	signature:(const std::string key)
QQJsonKey::_key	qqjsonkey.h	/^    std::string _key;$/;"	m	class:QQJsonKey	access:private
QQJsonKey::getKey	qqjsonkey.h	/^    const std::string &getKey(){return _key;}$/;"	f	class:QQJsonKey	access:public	signature:()
QQJsonKey::override	qqjsonkey.h	/^    virtual QQJsonXType whichType() override;$/;"	m	class:QQJsonKey	access:public
QQJsonKey::override	qqjsonkey.h	/^    virtual const std::string toString() override;$/;"	m	class:QQJsonKey	access:public
QQJsonKey::toString	qqjsonkey.cpp	/^const std::string QQJsonKey::toString()$/;"	f	class:QQJsonKey	signature:()
QQJsonKey::whichType	qqjsonkey.cpp	/^QQJsonX::QQJsonXType QQJsonKey::whichType()$/;"	f	class:QQJsonKey	signature:()
QQJsonNull	qqjson_null.cpp	/^QQJsonNull::QQJsonNull()$/;"	f	class:QQJsonNull	signature:()
QQJsonNull	qqjson_null.h	/^    QQJsonNull();$/;"	p	class:QQJsonNull	access:public	signature:()
QQJsonNull	qqjson_null.h	/^class QQJsonNull : public QQJsonX$/;"	c	inherits:QQJsonX
QQJsonNull::QQJsonNull	qqjson_null.cpp	/^QQJsonNull::QQJsonNull()$/;"	f	class:QQJsonNull	signature:()
QQJsonNull::QQJsonNull	qqjson_null.h	/^    QQJsonNull();$/;"	p	class:QQJsonNull	access:public	signature:()
QQJsonNull::override	qqjson_null.h	/^    virtual QQJsonX::QQJsonXType whichType() override;$/;"	m	class:QQJsonNull	access:public
QQJsonNull::override	qqjson_null.h	/^    virtual const std::string  toString() override;$/;"	m	class:QQJsonNull	access:public
QQJsonNull::toString	qqjson_null.cpp	/^const std::string QQJsonNull::toString()$/;"	f	class:QQJsonNull	signature:()
QQJsonNull::whichType	qqjson_null.cpp	/^QQJsonX::QQJsonXType QQJsonNull::whichType()$/;"	f	class:QQJsonNull	signature:()
QQJsonNumber	qqjson_number.cpp	/^QQJsonNumber::QQJsonNumber()$/;"	f	class:QQJsonNumber	signature:()
QQJsonNumber	qqjson_number.h	/^    QQJsonNumber();$/;"	p	class:QQJsonNumber	access:public	signature:()
QQJsonNumber	qqjson_number.h	/^    QQJsonNumber(std::string const&  str) : _number(str){}$/;"	f	class:QQJsonNumber	access:public	signature:(std::string const& str)
QQJsonNumber	qqjson_number.h	/^class QQJsonNumber : public QQJsonX$/;"	c	inherits:QQJsonX
QQJsonNumber::QQJsonNumber	qqjson_number.cpp	/^QQJsonNumber::QQJsonNumber()$/;"	f	class:QQJsonNumber	signature:()
QQJsonNumber::QQJsonNumber	qqjson_number.h	/^    QQJsonNumber();$/;"	p	class:QQJsonNumber	access:public	signature:()
QQJsonNumber::QQJsonNumber	qqjson_number.h	/^    QQJsonNumber(std::string const&  str) : _number(str){}$/;"	f	class:QQJsonNumber	access:public	signature:(std::string const& str)
QQJsonNumber::_number	qqjson_number.h	/^    std::string _number;$/;"	m	class:QQJsonNumber	access:private
QQJsonNumber::override	qqjson_number.h	/^    virtual QQJsonX::QQJsonXType whichType() override;$/;"	m	class:QQJsonNumber	access:public
QQJsonNumber::override	qqjson_number.h	/^    virtual const std::string  toString() override;$/;"	m	class:QQJsonNumber	access:public
QQJsonNumber::toString	qqjson_number.cpp	/^const std::string QQJsonNumber::toString()$/;"	f	class:QQJsonNumber	signature:()
QQJsonNumber::whichType	qqjson_number.cpp	/^QQJsonX::QQJsonXType QQJsonNumber::whichType()$/;"	f	class:QQJsonNumber	signature:()
QQJsonObject	qqjson_object.cpp	/^QQJsonObject::QQJsonObject()$/;"	f	class:QQJsonObject	signature:()
QQJsonObject	qqjson_object.h	/^    QQJsonObject();$/;"	p	class:QQJsonObject	access:public	signature:()
QQJsonObject	qqjson_object.h	/^class QQJsonObject : public QQJsonX$/;"	c	inherits:QQJsonX
QQJsonObject::QQJsonObject	qqjson_object.cpp	/^QQJsonObject::QQJsonObject()$/;"	f	class:QQJsonObject	signature:()
QQJsonObject::QQJsonObject	qqjson_object.h	/^    QQJsonObject();$/;"	p	class:QQJsonObject	access:public	signature:()
QQJsonObject::_ObjectMap	qqjson_object.h	/^    std::map<std::string, std::shared_ptr<QQJsonX> > _ObjectMap;$/;"	m	class:QQJsonObject	access:private
QQJsonObject::addVaule	qqjson_object.cpp	/^void QQJsonObject::addVaule(const std::string &key, std::shared_ptr<QQJsonX> value)$/;"	f	class:QQJsonObject	signature:(const std::string &key, std::shared_ptr<QQJsonX> value)
QQJsonObject::addVaule	qqjson_object.h	/^    virtual void addVaule(const std::string &key, std::shared_ptr<QQJsonX> value);$/;"	p	class:QQJsonObject	access:public	signature:(const std::string &key, std::shared_ptr<QQJsonX> value)
QQJsonObject::operator []	qqjson_object.h	/^    std::shared_ptr<QQJsonX> operator[](const std::string index)$/;"	f	class:QQJsonObject	access:public	signature:(const std::string index)
QQJsonObject::override	qqjson_object.h	/^    virtual  const std::string toString() override;$/;"	m	class:QQJsonObject	access:public
QQJsonObject::override	qqjson_object.h	/^    virtual QQJsonX::QQJsonXType whichType() override;$/;"	m	class:QQJsonObject	access:public
QQJsonObject::toString	qqjson_object.cpp	/^const std::string QQJsonObject::toString()$/;"	f	class:QQJsonObject	signature:()
QQJsonObject::whichType	qqjson_object.cpp	/^QQJsonX::QQJsonXType QQJsonObject::whichType()$/;"	f	class:QQJsonObject	signature:()
QQJsonString	qqjsonstring.h	/^    QQJsonString(const std::string &str):_String(str){}$/;"	f	class:QQJsonString	access:public	signature:(const std::string &str)
QQJsonString	qqjsonstring.h	/^class QQJsonString : public QQJsonX$/;"	c	inherits:QQJsonX
QQJsonString::QQJsonString	qqjsonstring.h	/^    QQJsonString(const std::string &str):_String(str){}$/;"	f	class:QQJsonString	access:public	signature:(const std::string &str)
QQJsonString::_String	qqjsonstring.h	/^    std::string _String;$/;"	m	class:QQJsonString	access:private
QQJsonX	qqjsonx.h	/^class QQJsonX$/;"	c
QQJsonX::QQJSON_ARRAY	qqjsonx.h	/^        QQJSON_ARRAY, QQJSON_OBJECT, QQJSON_VALUE,$/;"	e	enum:QQJsonX::__anon5
QQJsonX::QQJSON_BOOLEN	qqjsonx.h	/^        QQJSON_KEY,QQJSON_STRING, QQJSON_BOOLEN,$/;"	e	enum:QQJsonX::__anon5
QQJsonX::QQJSON_KEY	qqjsonx.h	/^        QQJSON_KEY,QQJSON_STRING, QQJSON_BOOLEN,$/;"	e	enum:QQJsonX::__anon5
QQJsonX::QQJSON_NULL	qqjsonx.h	/^        QQJSON_NULL,QQJSON_NUMBER$/;"	e	enum:QQJsonX::__anon5
QQJsonX::QQJSON_NUMBER	qqjsonx.h	/^        QQJSON_NULL,QQJSON_NUMBER$/;"	e	enum:QQJsonX::__anon5
QQJsonX::QQJSON_OBJECT	qqjsonx.h	/^        QQJSON_ARRAY, QQJSON_OBJECT, QQJSON_VALUE,$/;"	e	enum:QQJsonX::__anon5
QQJsonX::QQJSON_STRING	qqjsonx.h	/^        QQJSON_KEY,QQJSON_STRING, QQJSON_BOOLEN,$/;"	e	enum:QQJsonX::__anon5
QQJsonX::QQJSON_VALUE	qqjsonx.h	/^        QQJSON_ARRAY, QQJSON_OBJECT, QQJSON_VALUE,$/;"	e	enum:QQJsonX::__anon5
QQJsonX::QQJsonXType	qqjsonx.h	/^    }QQJsonXType;$/;"	t	class:QQJsonX	typeref:enum:QQJsonX::__anon5	access:public
QQJsonX::toString	qqjsonx.h	/^    virtual const std::string toString() = 0;$/;"	p	class:QQJsonX	access:public	signature:()
QQJsonX::whichType	qqjsonx.h	/^    virtual QQJsonXType whichType() = 0;$/;"	p	class:QQJsonX	access:public	signature:()
QQJsonXType	qqjsonx.h	/^    }QQJsonXType;$/;"	t	class:QQJsonX	typeref:enum:QQJsonX::__anon5	access:public
RANLIB	Makefile	/^RANLIB        = $/;"	m
SED	Makefile	/^SED           = sed$/;"	m
SOURCES	Makefile	/^SOURCES       = AbstractState.cpp \\$/;"	m
SOURCE_EXTENSIONS	.ycm_extra_conf.py	/^SOURCE_EXTENSIONS = [ '.cpp', '.cxx', '.cc', '.c', '.m', '.mm' ]$/;"	v
STATE	QQJsonCommon.h	/^                   Expect_CommaOrEnd, Stack_Top_Check}STATE;$/;"	t	namespace:QQJson	typeref:enum:QQJson::__anon3
STRIP	Makefile	/^STRIP         = strip$/;"	m
SUCCESS	QQJsonCommon.h	/^                    UNKONE_ERROR, SUCCESS} StateCode_Type;$/;"	e	enum:QQJson::__anon1
SYMLINK	Makefile	/^SYMLINK       = ln -f -s$/;"	m
Stack_Top_Check	QQJsonCommon.h	/^                   Expect_CommaOrEnd, Stack_Top_Check}STATE;$/;"	e	enum:QQJson::__anon3
Start	QQJsonCommon.h	/^    typedef enum{Start, Expect_Key, Expect_Value,$/;"	e	enum:QQJson::__anon3
StartState	StartState.h	/^class StartState: public AbstractState{$/;"	c	inherits:AbstractState
StartState::handle	StartState.cpp	/^    StartState::handle(AbstractContext *context, QQJsonDocument *doc)$/;"	f	class:StartState	signature:(AbstractContext *context, QQJsonDocument *doc)
StartState::override	StartState.h	/^         handle(AbstractContext *context, QQJsonDocument *doc) override;$/;"	m	class:StartState	access:public
Start_State	QQJsonCommon.h	/^                  Expect_ColonState, Start_State,$/;"	e	enum:QQJson::__anon2
StateCode_Type	QQJsonCommon.h	/^                    UNKONE_ERROR, SUCCESS} StateCode_Type;$/;"	t	namespace:QQJson	typeref:enum:QQJson::__anon1
State_Type	QQJsonCommon.h	/^                 }State_Type;    $/;"	t	namespace:QQJson	typeref:enum:QQJson::__anon2
TAR	Makefile	/^TAR           = tar -cf$/;"	m
TARGET	Makefile	/^TARGET        = QQJson$/;"	m
TOKEN_BEGIN_ARRAY	qqjsondocument.h	/^        TOKEN_END_OBJECT, TOKEN_BEGIN_ARRAY,$/;"	e	enum:QQJsonDocument::__anon4
TOKEN_BEGIN_OBECT	qqjsondocument.h	/^        \/*TOKEN_DOC_END, *\/TOKEN_BEGIN_OBECT,$/;"	e	enum:QQJsonDocument::__anon4
TOKEN_BOOLEN	qqjsondocument.h	/^        TOKEN_STRING, TOKEN_BOOLEN, TOKEN_NUMER,$/;"	e	enum:QQJsonDocument::__anon4
TOKEN_COLON	qqjsondocument.h	/^        TOKEN_END_ARRAY, TOKEN_COLON, TOKEN_COMMA,$/;"	e	enum:QQJsonDocument::__anon4
TOKEN_COMMA	qqjsondocument.h	/^        TOKEN_END_ARRAY, TOKEN_COLON, TOKEN_COMMA,$/;"	e	enum:QQJsonDocument::__anon4
TOKEN_END_ARRAY	qqjsondocument.h	/^        TOKEN_END_ARRAY, TOKEN_COLON, TOKEN_COMMA,$/;"	e	enum:QQJsonDocument::__anon4
TOKEN_END_OBJECT	qqjsondocument.h	/^        TOKEN_END_OBJECT, TOKEN_BEGIN_ARRAY,$/;"	e	enum:QQJsonDocument::__anon4
TOKEN_ERROR	qqjsondocument.h	/^        TOKEN_NULL, TOKEN_ERROR,$/;"	e	enum:QQJsonDocument::__anon4
TOKEN_NULL	qqjsondocument.h	/^        TOKEN_NULL, TOKEN_ERROR,$/;"	e	enum:QQJsonDocument::__anon4
TOKEN_NUMER	qqjsondocument.h	/^        TOKEN_STRING, TOKEN_BOOLEN, TOKEN_NUMER,$/;"	e	enum:QQJsonDocument::__anon4
TOKEN_STRING	qqjsondocument.h	/^        TOKEN_STRING, TOKEN_BOOLEN, TOKEN_NUMER,$/;"	e	enum:QQJsonDocument::__anon4
Token	qqjsondocument.h	/^    }Token;$/;"	t	class:QQJsonDocument	typeref:enum:QQJsonDocument::__anon4	access:public
UNKONE_ERROR	QQJsonCommon.h	/^                    UNKONE_ERROR, SUCCESS} StateCode_Type;$/;"	e	enum:QQJson::__anon1
_ArrayName	qqjson_array.h	/^    std::string _ArrayName;$/;"	m	class:QQJsonArray	access:private
_ArrayVector	qqjson_array.h	/^    std::vector<std::shared_ptr<QQJsonX> >  _ArrayVector;$/;"	m	class:QQJsonArray	access:private
_BeginDocumentIter	qqjsondocument.h	/^   std::string::iterator _BeginDocumentIter;$/;"	m	class:QQJsonDocument	access:private
_Boolen	qqjson_boolen.h	/^    std::string _Boolen;$/;"	m	class:QQJsonBoolen	access:private
_Document	qqjson.h	/^    QQJsonDocument _Document;$/;"	m	class:QQJson	access:private
_Document	qqjsondocument.h	/^   std::string _Document;$/;"	m	class:QQJsonDocument	access:private
_EndDocumentIter	qqjsondocument.h	/^   std::string::iterator _EndDocumentIter;$/;"	m	class:QQJsonDocument	access:private
_ObjectMap	qqjson_object.h	/^    std::map<std::string, std::shared_ptr<QQJsonX> > _ObjectMap;$/;"	m	class:QQJsonObject	access:private
_ParseStack	qqjson.h	/^    std::stack<std::shared_ptr<QQJsonX> > _ParseStack;$/;"	m	class:QQJson	access:private
_String	qqjsonstring.h	/^    std::string _String;$/;"	m	class:QQJsonString	access:private
_WorkerIter	qqjsondocument.h	/^   std::string::iterator _WorkerIter;$/;"	m	class:QQJsonDocument	access:private
__ABSTRACTCONTEXT_H__	AbstractContext.h	2;"	d
__ABSTRACTSTATE_H__	AbstractState.h	2;"	d
__EXPECTARRAYVALUE_H__	ExpectArrayValue.h	2;"	d
__EXPECTCOLONSTATE_H__	ExpectColonState.h	2;"	d
__EXPECTCOMMAORENDSTATE_H__	ExpectCommaOrEndState.h	2;"	d
__EXPECTKEYSTATE_H__	ExpectKeyState.h	2;"	d
__EXPECTVALUESTATE_H__	ExpectValueState.h	2;"	d
__QQJSONCOMMON_H__	QQJsonCommon.h	2;"	d
__QQJSONCONTEXT_H__	QQJsonContext.h	2;"	d
__STARTSTATE_H__	StartState.h	2;"	d
_curState	QQJsonContext.h	/^    std::shared_ptr<AbstractState> _curState;$/;"	m	class:QQJsonContext	access:private
_key	qqjsonkey.h	/^    std::string _key;$/;"	m	class:QQJsonKey	access:private
_number	qqjson_number.h	/^    std::string _number;$/;"	m	class:QQJsonNumber	access:private
_stack	AbstractContext.h	/^    std::stack<QQJson::jsonPtr> _stack;$/;"	m	class:AbstractContext	access:private
addValue	qqjson_array.cpp	/^void QQJsonArray::addValue(std::shared_ptr<QQJsonX> ptr)$/;"	f	class:QQJsonArray	signature:(std::shared_ptr<QQJsonX> ptr)
addValue	qqjson_array.h	/^    virtual void addValue(std::shared_ptr<QQJsonX> ptr);$/;"	p	class:QQJsonArray	access:public	signature:(std::shared_ptr<QQJsonX> ptr)
addVaule	qqjson_object.cpp	/^void QQJsonObject::addVaule(const std::string &key, std::shared_ptr<QQJsonX> value)$/;"	f	class:QQJsonObject	signature:(const std::string &key, std::shared_ptr<QQJsonX> value)
addVaule	qqjson_object.h	/^    virtual void addVaule(const std::string &key, std::shared_ptr<QQJsonX> value);$/;"	p	class:QQJsonObject	access:public	signature:(const std::string &key, std::shared_ptr<QQJsonX> value)
compilation_database_folder	.ycm_extra_conf.py	/^compilation_database_folder = ''$/;"	v
database	.ycm_extra_conf.py	/^  database = None$/;"	v
database	.ycm_extra_conf.py	/^  database = ycm_core.CompilationDatabase( compilation_database_folder )$/;"	v
doExpectArrayValue	AbstractState.cpp	/^         AbstractState::doExpectArrayValue(AbstractContext *context, $/;"	f	class:AbstractState	signature:(AbstractContext *context, QQJson::jsonPtr json)
doExpectArrayValue	AbstractState.h	/^    static QQJson::StateCode_Type doExpectArrayValue(AbstractContext*, QQJson::jsonPtr);$/;"	p	class:AbstractState	access:public	signature:(AbstractContext*, QQJson::jsonPtr)
doExpectValue	AbstractState.cpp	/^  AbstractState::doExpectValue(AbstractContext*context, QQJson::jsonPtr ptr)$/;"	f	class:AbstractState	signature:(AbstractContext*context, QQJson::jsonPtr ptr)
doExpectValue	AbstractState.h	/^    static QQJson::StateCode_Type doExpectValue(AbstractContext* context, QQJson::jsonPtr ptr);$/;"	p	class:AbstractState	access:public	signature:(AbstractContext* context, QQJson::jsonPtr ptr)
flags	.ycm_extra_conf.py	/^flags = [$/;"	v
getCurState	QQJsonContext.h	/^    std::shared_ptr<AbstractState> getCurState(void)$/;"	f	class:QQJsonContext	access:public	signature:(void)
getKey	qqjsonkey.h	/^    const std::string &getKey(){return _key;}$/;"	f	class:QQJsonKey	access:public	signature:()
getStack	AbstractContext.h	/^    std::stack<QQJson::jsonPtr> &getStack(void){$/;"	f	class:AbstractContext	access:public	signature:(void)
handle	AbstractState.h	/^			handle(AbstractContext* context ,QQJsonDocument *doc) = 0;$/;"	p	class:AbstractState	access:public	signature:(AbstractContext* context ,QQJsonDocument *doc)
handle	ExpectArrayValue.cpp	/^    ExpectArrayValueState::handle(AbstractContext* context, QQJsonDocument *doc)$/;"	f	class:ExpectArrayValueState	signature:(AbstractContext* context, QQJsonDocument *doc)
handle	ExpectColonState.cpp	/^    ExpectColonState::handle(AbstractContext* context, QQJsonDocument *doc)$/;"	f	class:ExpectColonState	signature:(AbstractContext* context, QQJsonDocument *doc)
handle	ExpectCommaOrEndState.cpp	/^    ExpectCommaOrEndState::handle(AbstractContext *context, QQJsonDocument *doc)$/;"	f	class:ExpectCommaOrEndState	signature:(AbstractContext *context, QQJsonDocument *doc)
handle	ExpectKeyState.cpp	/^    ExpectKeyState::handle(AbstractContext *context, QQJsonDocument *doc)$/;"	f	class:ExpectKeyState	signature:(AbstractContext *context, QQJsonDocument *doc)
handle	ExpectValueState.cpp	/^    ExpectValueState::handle(AbstractContext *context, QQJsonDocument *doc)$/;"	f	class:ExpectValueState	signature:(AbstractContext *context, QQJsonDocument *doc)
handle	StartState.cpp	/^    StartState::handle(AbstractContext *context, QQJsonDocument *doc)$/;"	f	class:StartState	signature:(AbstractContext *context, QQJsonDocument *doc)
main	main.cpp	/^int main(void)$/;"	f	signature:(void)
operator []	qqjson_array.h	/^    std::shared_ptr<QQJsonX> operator[](const uint32_t index)$/;"	f	class:QQJsonArray	access:public	signature:(const uint32_t index)
operator []	qqjson_object.h	/^    std::shared_ptr<QQJsonX> operator[](const std::string index)$/;"	f	class:QQJsonObject	access:public	signature:(const std::string index)
override	ExpectArrayValue.h	/^    virtual QQJson::StateCode_Type handle(AbstractContext*, QQJsonDocument *) override;$/;"	m	class:ExpectArrayValueState	access:public
override	ExpectColonState.h	/^    QQJson::StateCode_Type handle(AbstractContext*, QQJsonDocument *) override;$/;"	m	class:ExpectColonState	access:public
override	ExpectCommaOrEndState.h	/^    virtual QQJson::StateCode_Type handle(AbstractContext *, QQJsonDocument *) override;$/;"	m	class:ExpectCommaOrEndState	access:public
override	ExpectKeyState.h	/^                                QQJsonDocument *) override;$/;"	m	class:ExpectKeyState	access:public
override	ExpectValueState.h	/^    QQJson::StateCode_Type handle(AbstractContext*, QQJsonDocument *) override;$/;"	m	class:ExpectValueState	access:public
override	QQJsonContext.h	/^    QQJson::StateCode_Type request(QQJsonDocument *doc) override;$/;"	m	class:QQJsonContext	access:public
override	QQJsonContext.h	/^    void setCurState(QQJson::State_Type state) override;$/;"	m	class:QQJsonContext	access:public
override	StartState.h	/^         handle(AbstractContext *context, QQJsonDocument *doc) override;$/;"	m	class:StartState	access:public
override	qqjson_array.h	/^    virtual QQJsonX::QQJsonXType whichType() override;$/;"	m	class:QQJsonArray	access:public
override	qqjson_array.h	/^    virtual const std::string  toString() override;$/;"	m	class:QQJsonArray	access:public
override	qqjson_boolen.h	/^    virtual QQJsonX::QQJsonXType whichType() override;$/;"	m	class:QQJsonBoolen	access:public
override	qqjson_boolen.h	/^    virtual const std::string  toString() override;$/;"	m	class:QQJsonBoolen	access:public
override	qqjson_null.h	/^    virtual QQJsonX::QQJsonXType whichType() override;$/;"	m	class:QQJsonNull	access:public
override	qqjson_null.h	/^    virtual const std::string  toString() override;$/;"	m	class:QQJsonNull	access:public
override	qqjson_number.h	/^    virtual QQJsonX::QQJsonXType whichType() override;$/;"	m	class:QQJsonNumber	access:public
override	qqjson_number.h	/^    virtual const std::string  toString() override;$/;"	m	class:QQJsonNumber	access:public
override	qqjson_object.h	/^    virtual  const std::string toString() override;$/;"	m	class:QQJsonObject	access:public
override	qqjson_object.h	/^    virtual QQJsonX::QQJsonXType whichType() override;$/;"	m	class:QQJsonObject	access:public
override	qqjsonkey.h	/^    virtual QQJsonXType whichType() override;$/;"	m	class:QQJsonKey	access:public
override	qqjsonkey.h	/^    virtual const std::string toString() override;$/;"	m	class:QQJsonKey	access:public
peekNextToken	qqjsondocument.cpp	/^QQJsonDocument::Token QQJsonDocument::peekNextToken()$/;"	f	class:QQJsonDocument	signature:()
peekNextToken	qqjsondocument.h	/^    Token peekNextToken();$/;"	p	class:QQJsonDocument	access:public	signature:()
popToken	qqjsondocument.h	/^    void popToken();$/;"	p	class:QQJsonDocument	access:public	signature:()
readAToken	qqjsondocument.cpp	/^std::string QQJsonDocument::readAToken()$/;"	f	class:QQJsonDocument	signature:()
readAToken	qqjsondocument.h	/^   std::string readAToken();$/;"	p	class:QQJsonDocument	access:public	signature:()
readBoolen	qqjsondocument.cpp	/^std::string QQJsonDocument::readBoolen()$/;"	f	class:QQJsonDocument	signature:()
readBoolen	qqjsondocument.h	/^    std::string readBoolen();$/;"	p	class:QQJsonDocument	access:public	signature:()
readColon	qqjsondocument.cpp	/^std::string QQJsonDocument::readColon()$/;"	f	class:QQJsonDocument	signature:()
readColon	qqjsondocument.h	/^    std::string readColon();$/;"	p	class:QQJsonDocument	access:public	signature:()
readComma	qqjsondocument.cpp	/^std::string QQJsonDocument::readComma()$/;"	f	class:QQJsonDocument	signature:()
readComma	qqjsondocument.h	/^    std::string readComma();$/;"	p	class:QQJsonDocument	access:public	signature:()
readNull	qqjsondocument.cpp	/^std::string QQJsonDocument::readNull()$/;"	f	class:QQJsonDocument	signature:()
readNull	qqjsondocument.h	/^    std::string readNull();$/;"	p	class:QQJsonDocument	access:public	signature:()
readNumber	qqjsondocument.cpp	/^std::string QQJsonDocument::readNumber()$/;"	f	class:QQJsonDocument	signature:()
readNumber	qqjsondocument.h	/^    std::string readNumber();$/;"	p	class:QQJsonDocument	access:public	signature:()
readString	qqjsondocument.cpp	/^std::string QQJsonDocument::readString()$/;"	f	class:QQJsonDocument	signature:()
readString	qqjsondocument.h	/^    std::string readString();$/;"	p	class:QQJsonDocument	access:public	signature:()
request	AbstractContext.h	/^    virtual QQJson::StateCode_Type request(QQJsonDocument *doc) = 0; $/;"	p	class:AbstractContext	access:public	signature:(QQJsonDocument *doc)
request	QQJsonContext.cpp	/^   QQJsonContext::request(QQJsonDocument *doc)$/;"	f	class:QQJsonContext	signature:(QQJsonDocument *doc)
setCurState	AbstractContext.h	/^    virtual void setCurState(QQJson::State_Type state) = 0;$/;"	p	class:AbstractContext	access:public	signature:(QQJson::State_Type state)
setCurState	QQJsonContext.cpp	/^void QQJsonContext::setCurState(QQJson::State_Type state)$/;"	f	class:QQJsonContext	signature:(QQJson::State_Type state)
toString	qqjson_array.cpp	/^const std::string QQJsonArray::toString()$/;"	f	class:QQJsonArray	signature:()
toString	qqjson_boolen.cpp	/^const std::string QQJsonBoolen::toString()$/;"	f	class:QQJsonBoolen	signature:()
toString	qqjson_null.cpp	/^const std::string QQJsonNull::toString()$/;"	f	class:QQJsonNull	signature:()
toString	qqjson_number.cpp	/^const std::string QQJsonNumber::toString()$/;"	f	class:QQJsonNumber	signature:()
toString	qqjson_object.cpp	/^const std::string QQJsonObject::toString()$/;"	f	class:QQJsonObject	signature:()
toString	qqjsonkey.cpp	/^const std::string QQJsonKey::toString()$/;"	f	class:QQJsonKey	signature:()
toString	qqjsonx.h	/^    virtual const std::string toString() = 0;$/;"	p	class:QQJsonX	access:public	signature:()
whichType	qqjson_array.cpp	/^QQJsonX::QQJsonXType QQJsonArray::whichType()$/;"	f	class:QQJsonArray	signature:()
whichType	qqjson_boolen.cpp	/^QQJsonX::QQJsonXType QQJsonBoolen::whichType()$/;"	f	class:QQJsonBoolen	signature:()
whichType	qqjson_null.cpp	/^QQJsonX::QQJsonXType QQJsonNull::whichType()$/;"	f	class:QQJsonNull	signature:()
whichType	qqjson_number.cpp	/^QQJsonX::QQJsonXType QQJsonNumber::whichType()$/;"	f	class:QQJsonNumber	signature:()
whichType	qqjson_object.cpp	/^QQJsonX::QQJsonXType QQJsonObject::whichType()$/;"	f	class:QQJsonObject	signature:()
whichType	qqjsonkey.cpp	/^QQJsonX::QQJsonXType QQJsonKey::whichType()$/;"	f	class:QQJsonKey	signature:()
whichType	qqjsonx.h	/^    virtual QQJsonXType whichType() = 0;$/;"	p	class:QQJsonX	access:public	signature:()
